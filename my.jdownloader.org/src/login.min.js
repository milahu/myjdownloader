(function (a) {
  function b(a, b, c) {
    if (a.type === "OVERLOAD") {
      b("<b>" + i18n.t("panels.errors.serverErrorHeading") + "</b><br />" + i18n.t("panels.errors.overloadError"));
      return;
    } else if (a.type === "TOO_MANY_REQUESTS") {
      b("<b>" + i18n.t("panels.errors.serverErrorHeading") + "</b><br />" + i18n.t("panels.errors.tooManyRequestsError"));
      return;
    } else {
      if (c !== null && c !== undefined) {
        c(a);
      }
      return;
    }
  }
  function c() {
    var a = {};
    window.location.href.replace(/[?&]+([^=&]+)=([^&]*)/gi, function (b, c, d) {
      a[c] = decodeURIComponent(d).split("#")[0];
    });
    return a;
  }
  function d(b, c) {
    var d = c.offset().top;
    a("html, body").animate({
      scrollTop: d
    }, b !== null && typeof b == "string" ? b : "normal");
    return false;
  }
  var e = null;
  var f = {
    Version: function () {
      var a = 999;
      if (navigator.appVersion.indexOf("MSIE") != -1) {
        a = parseFloat(navigator.appVersion.split("MSIE")[1]);
      }
      return a;
    }
  };
  var g = {
    init: function (b) {
      var c = false;
      a("a#dropDownMenuButton").click(function (b) {
        a("#dropDownMenu").toggle();
        c = !c;
        if (c) {
          a("a#dropDownMenuButton img").attr("src", "/images/settingsarrow32_active.png");
          a("a#dropDownMenuButton").addClass("current");
        } else {
          a("a#dropDownMenuButton img").attr("src", "/images/settingsarrow32.png");
          a("a#dropDownMenuButton").removeClass("current");
        }
        b.stopPropagation();
      });
      a("body").click(function (b) {
        if (c) {
          for (var d = b.target; d !== null && d.id !== "dropDownMenu";) {
            d = d.parentNode;
          }
          if (d === null) {
            a("#dropDownMenu").hide();
            a("a#dropDownMenuButton img").attr("src", "/images/settingsarrow32.png");
            a("a#dropDownMenuButton").removeClass("current");
            c = false;
          }
        }
      });
      a("#premiumStatus").hide();
      a("#freeStatus a").click(function (b) {
        a("#freeStatus").hide();
        a("#premiumStatus").show();
      });
      this.update(b);
    },
    update: function (b) {
      if (b && b.loggedIn) {
        a("#currentUserMenuEntry").html("Logged in as: <b>" + b.name + "</b>");
        a("#currentUserMenuEntry").show();
        a("#notLoggedInMenuEntry").hide();
      } else {
        a("#currentUserMenuEntry").hide();
        a("#notLoggedInMenuEntry").show();
      }
    },
    hide: function () {
      a("a#dropDownMenuButton").trigger("click");
    }
  };
  var h = {
    name: "#login",
    view: a("#signinPanel"),
    init: function () {
      if (window.location.hash == "#logout") {
        if (c().reason == "NO_TOKEN#logout") {
          this.showSuccess("<b>Log out successful</b><br/>Session expired.");
        } else {
          this.showSuccess(i18n.t("panels.general.logoutSuccessMessage"));
        }
      }
      this.view.find(".forgotPasswordAnchor").on("click", function () {
        window.location = "login.html#forgotPassword?email=" + a("#usernameInput").val();
      });
      var d = c();
      if (d.email) {
        a("#usernameInput").val(d.email);
      }
      a("#usernameInput").keypress(function (b) {
        if (b.which == 13) {
          a("#loginButtonFake").trigger("click");
        }
      });
      a("#passwordInput").keypress(function (b) {
        if (b.which == 13) {
          a("#loginButtonFake").trigger("click");
        }
      });
      a("#loginForm").submit(function (c) {
        c.preventDefault();
        c.stopPropagation();
        h.setValidStyle();
        var d = a("#usernameInput").val().trim();
        var f = a("#passwordInput").val();
        var g = d.toLowerCase() !== d;
        var i = false;
        var j = "";
        if (d === "" || !/.@./.test(d)) {
          i = true;
          a("#usernameInput").addClass("invalid");
          j += i18n.t("panels.errors.invalidEmail");
        }
        if (f === "") {
          i = true;
          a("#passwordInput").addClass("invalid");
          j += i18n.t("panels.errors.invalidPassword");
        }
        if (i) {
          h.showError("<b>" + i18n.t("panels.errors.invalidInput") + "</b><br/>" + j);
          return;
        }
        h.showError(null);
        a("#usernameInput").attr("disabled", true);
        a("#passwordInput").attr("disabled", true);
        var k = false;
        e.connect({
          email: d,
          pass: f
        }).done(function (a) {
          k = true;
          window.location.href = "index.html#dashboard";
        }).fail(function (c) {
          c = JSON.parse(c.responseText);
          b(c, h.showError, function (b) {
            console.log("ERROR " + b.type);
            if (b.type === "EMAIL_INVALID") {
              h.showError("<b>" + i18n.t("panels.errors.emailUnknownHeader") + "</b><br />" + i18n.t("panels.errors.emailUnknown") + "<a href='login.html#register?email=" + d + "'><br/>" + i18n.t("marketing.callToAction") + "</a>");
              a(".noAccountAnchor").attr("href", "login.html#register?email=" + a("#usernameInput").val());
            } else if (b.type === "AUTH_FAILED") {
              h.showError("<b>" + i18n.t("panels.errors.wrongCredentialsHeader") + "</b><br/>" + i18n.t("panels.errors.wrongCredentials") + "<br/><a href='login.html#forgotPassword?email=" + a("#usernameInput").val() + "'>" + i18n.t("panels.general.forgotPasswordButton") + "</a>");
              if (g) {
                window.location = "login.html#forgotPassword?email=" + d.toLowerCase() + "&forced=true";
              }
            } else if (b.type === "ERROR_EMAIL_NOT_CONFIRMED") {
              h.showError("<b>" + i18n.t("panels.errors.emailNotConfirmedHeader") + "</b><br/>" + i18n.t("panels.errors.emailNotConfirmed") + "<br/> <a href='login.html#register?email=" + a("#usernameInput").val() + "'>" + i18n.t("panels.general.requestNewInviteButton") + "</a>");
            }
          });
          a("#usernameInput").attr("disabled", false);
          a("#passwordInput").attr("disabled", false);
        });
      });
    },
    clear: function () {
      console.log("CLEAR LOGIN DATA");
      a("#usernameInput").val("");
      a("#passwordInput").val("");
      a("#signinPanel .errorMessage").hide();
      a(".noAccountAnchor").attr("href", "login.html#register");
      h.setValidStyle();
    },
    setValidStyle: function () {
      a(".invalid").removeClass("invalid");
    },
    showError: function (b) {
      if (b === null) {
        a("#signinPanel .errorMessage").hide();
        return;
      }
      a("#signinPanel .errorMessage").html(b);
      a("#signinPanel .errorMessage").show();
    },
    showSuccess: function (b) {
      a("#signinPanel .successMessage").html(b);
      a("#signinPanel .successMessage").show();
    }
  };
  var i = {
    name: "register",
    view: a("#registerPanel"),
    init: function () {
      this.captcha ||= new jd.Captcha("#registerPanel", e);
      this.reloadCaptcha();
      this.view.fadeIn(1000);
      this.view.removeAttr("style");
      var d = c();
      if (d.email) {
        a("#registerEmailInput").val(d.email);
      }
      var f = this;
      a("#registerEmailInput").keyup(function () {
        if (/.*@(outlook|hotmail|live|msn|microsoft)\..*/g.test(a("#registerEmailInput").val())) {
          var b = "<b>" + i18n.t("panels.errors.hotmailErrorHeader") + "</b><br/>" + i18n.t("panels.errors.hotmailErrorBody") + "<br/>";
          a("#registerEmailInput").addClass("invalid");
          i.showError(b, true);
          a("#registerButton").prop("disabled", true);
          a("#registerButton").prop("class", "xbuttonDisabled");
        } else {
          i.showError(null);
          a("#registerEmailInput").removeClass("invalid");
          a("#registerButton").prop("disabled", false);
          a("#registerButton").prop("class", "xbutton");
        }
      });
      a("#registerForm").submit(function (c) {
        c.preventDefault();
        i.setValidStyle();
        var d = a("#registerEmailInput").val().trim();
        var g = i.captcha.getChallenge();
        var h = i.captcha.getResponse();
        var j = a("#termsCheckbox").is(":checked");
        var k = true;
        var l = false;
        var m = "<b>" + i18n.t("panels.errors.invalidInput") + "</b><br/>";
        if (!j) {
          m = m + i18n.t("panels.errors.termsNotAccepted") + "<br/>";
          a("#termsCheckbox").addClass("invalid");
          k = false;
        }
        if (d === "" || !i.validateEmail(d)) {
          m = m + i18n.t("panels.errors.invalidEmail") + "<br/>";
          a("#registerEmailInput").addClass("invalid");
          k = false;
        }
        if (/.*@(outlook|hotmail|live|msn)\..*/g.test(d)) {
          m = m + i18n.t("panels.errors.invalidEmailHotmail") + "<br/>";
          a("#registerEmailInput").addClass("invalid");
          k = false;
        }
        if (h === "") {
          m = m + i18n.t("panels.errors.emptyCaptcha") + "<br/>";
          a("#registerPanel .captchaResponseInput").addClass("invalid");
          k = false;
        }
        if (!k) {
          i.showError(m, true);
          return;
        }
        i.showError(null);
        var n = e.registerUser({
          email: d,
          captchaChallenge: g,
          captchaResponse: h
        });
        n.isHotmail = l;
        a("#registerEmailInput").attr("disabled", true);
        a("#captchaResponseInput").attr("disabled", true);
        a("#termsCheckbox").attr("disabled", true);
        n.done(function (b) {
          a("#registerEmailInput").attr("disabled", false);
          a("#termsChekcbox").attr("disabled", false);
          a("#captchaResponseInput").attr("disabled", false);
          if (n.isHotmail) {
            window.location.hash = "sentInviteHotmail";
          } else {
            window.location.hash = "sentInvite";
          }
        });
        n.fail(function (c) {
          console.log("REG FAILED");
          b(JSON.parse(c.responseText), i.showError, function (b) {
            if (b.type == "EMAIL_FORBIDDEN") {
              i.showError("<b>" + i18n.t("panels.errors.invalidEmail") + "</b><br/>" + i18n.t("panels.errors.emailAlreadyRegistered") + "<br/><a href='login.html#forgotPassword?email=" + a("#usernameInput").val() + "'>" + i18n.t("panels.general.forgotPasswordButton") + "</a>");
              a("#registerEmailInput").addClass("invalid");
              a(".backToLoginAnchor").attr("href", "login.html?email=" + a("#registerEmailInput").val());
              return;
            } else if (b.type == "CHALLENGE_FAILED") {
              i.showError("<b>" + i18n.t("panels.errors.captchaError") + "</b><br/>" + i18n.t("panels.errors.wrongCaptcha"));
              a("#captchaResponseInput").addClass("invalid");
              f.captcha.reload();
              return;
            } else if (b.type == "EMAIL_INVALID") {
              i.showError("<b>" + i18n.t("panels.errors.invalidEmail") + "</b><br/>" + i18n.t("panels.errors.invalidEmail"));
              a("#registerEmailInput").addClass("invalid");
              return;
            } else {
              i.showError("<b>Input Error</b><br/>" + i18n.t("panels.errors.unknownError"));
              return;
            }
          });
        });
      });
    },
    captcha: null,
    reloadCaptcha: function () {
      if (this.captcha) {
        this.captcha.reload();
      }
    },
    validateEmail: function (a) {
      return /^([\w-]+(?:\.[\w-]+)*)@((?:[\w-]+\.)*\w[\w-]{0,66})\.([a-z]{2,6}(?:\.[a-z]{2})?)$/i.test(a);
    },
    showError: function (b, c) {
      if (b === null) {
        a("#registerPanel .errorMessage").hide();
        return;
      }
      a("#registerPasswordInput").attr("disabled", false);
      a("#registerPasswordConfirmInput").attr("disabled", false);
      a("#registerEmailInput").attr("disabled", false);
      a("#termsChekcbox").attr("disabled", false);
      a("#captchaResponseInput").attr("disabled", false);
      if (!c) {
        this.reloadCaptcha();
      }
      a("#registerPanel .errorMessage").html(b);
      a("#registerPanel .errorMessage").show();
    },
    showSuccess: function (b) {
      console.log("Show success message: " + b);
      if (b === null) {
        a("#registerPanel .successMessage").hide();
        return;
      }
      a("#registerPanel .successMessage").html(b);
      a("#registerPanel .successMessage").show();
    },
    clear: function () {
      a("#registerEmailInput").val("");
      a("#registerPasswordInput").val("");
      a("#registerPasswordConfirmInput").val("");
      a("#termsChekcbox").prop("checked", false);
      this.reloadCaptcha();
      a("#registerPanel .errorMessage").hide();
      a(".backToLoginAnchor").attr("href", "login.html");
    },
    setValidStyle: function () {
      a(".invalid").removeClass("invalid");
    }
  };
  var j = {
    name: "purchase",
    view: a("#purchasePanel"),
    init: function () {
      this.captcha = new jd.Captcha("#purchasePanel", e);
      this.reloadCaptcha();
      a("#invoiceInputs").hide();
    },
    reloadCaptcha: function () {
      if (this.captcha) {
        this.captcha.reload();
      }
    }
  };
  var k = {
    name: "validate",
    view: a("#validatePanel"),
    init: function () {
      var d = c().email.trim();
      var f = c().key;
      this.showError(null);
      a("#emailValidationKeyInput").val(f);
      a("#emailValidationInput").val(d);
      if (!d || d === "") {
        a("#emailValidationInput").show();
      }
      if (!f || f === "") {
        a("#emailValidationKeyInput").show();
      }
      a("#validationForm").submit(function (c) {
        c.preventDefault();
        a(".invalid").removeClass("invalid");
        var d = a("#emailConfirmPasswordInput").val();
        var f = a("#emailValidationInput").val();
        var g = a("#emailValidationKeyInput").val();
        var h = true;
        var i = "<b>" + i18n.t("panels.errors.invalidInput") + "</b><br/>";
        if (f === "" || !/.@./.test(f)) {
          i = i + i18n.t("panels.errors.invalidEmail") + "<br/>";
          a("#emailValidationInput").addClass("invalid");
          h = false;
        }
        if (g === "") {
          i = i + i18n.t("panels.errors.emptyKey") + "<br/>";
          a("#registerPasswordInput").addClass("invalid");
          h = false;
        }
        if (d === "") {
          i = i + i18n.t("panels.errors.emptyPassword") + "<br/>";
          a("#emailConfirmPasswordInput").addClass("invalid");
          h = false;
        }
        if (!h) {
          k.showError(i);
          return;
        }
        e.confirmEmail(f, g, d).done(function (a) {
          console.log("validated");
          e.connect({
            email: f,
            pass: d
          }).done(function () {
            window.location = "index.html#dashboard";
          });
        }).fail(function (c) {
          k.showSuccess(null);
          a("#validationWelcome").show();
          var d = JSON.parse(c.responseText);
          console.log(d);
          b(d, k.showError, function (b) {
            if (b.type == "AUTH_FAILED") {
              k.showError("<b>" + i18n.t("panels.errors.invalidInput") + "</b><br/>" + i18n.t("panels.errors.possibleReason") + "<br/>" + i18n.t("panels.errors.invalidEmail") + "<br/>" + i18n.t("panels.errors.expiredKey") + "<br/><a href='login.html#register'>" + i18n.t("panels.errors.requestNewInviteButton") + "</a>");
              a("#emailConfirmPasswordInput").addClass("invalid");
              a("#emailValidationInput").addClass("invalid");
              a("#emailConfirmConfirmationPasswordInput").addClass("invalid");
              return;
            } else if (b.type == "EMAIL_INVALID") {
              k.showError("<b>" + i18n.t("panels.errors.emailUnknownHeader") + "</b><br/>" + i18n.t("panels.errors.emailUnknown") + "<br/><a href='login.html#register?email=" + f + "'>" + i18n.t("panels.errors.requestNewInviteButton") + "</a>");
              a("#emailConfirmPasswordInput").addClass("invalid");
              a("#emailValidationInput").addClass("invalid");
              a("#emailConfirmConfirmationPasswordInput").addClass("invalid");
              return;
            } else if (b.type == "ERROR_EMAIL_NOT_CONFIRMED") {
              k.showError("<b>" + i18n.t("panels.errors.emailExpiredHeader") + "</b><br/>" + i18n.t("panels.errors.emailExpired") + "<br/><a href='login.html#register?email=" + f + "'>" + i18n.t("panels.errors.requestNewInviteButton") + "</a></b>.");
              a("#emailConfirmPasswordInput").addClass("invalid");
              a("#emailValidationInput").addClass("invalid");
              a("#emailConfirmConfirmationPasswordInput").addClass("invalid");
              return;
            } else if (b.type == "FAILED") {
              k.showError("<b>" + i18n.t("panels.errors.expiredKey") + "</b><br/>" + i18n.t("panels.errors.emailExpiredHeader") + "<br/><a id='requestNewValidationKey'>" + i18n.t("panels.errors.requestNewInviteButton") + "</a>");
              a("#emailValidationKeyInput").addClass("invalid");
              a("#requestNewValidationKey").off("click");
              a("#requestNewValidationKey").on("click", function () {
                var b = a("#emailConfirmPasswordInput").val();
                e.requestConfirmEmail(b).done(function (a) {
                  k.showError(null);
                  k.showSuccess("New validation key sent.");
                }).fail(function (a) {
                  k.showSuccess(null);
                  k.showError("Error requesting new validation key. Check your email and password input and try the confirmation again.");
                });
              });
              return;
            } else {
              k.showError(i18n.t("panels.errors.unknownError"));
              return;
            }
          });
        });
      });
    },
    clear: function () {
      a("#emailConfirmPasswordInput").val("");
      a("#emailConfirmConfirmationPasswordInput").val("");
      a("#emailValidationInput").val("");
      a("#emailValidationKeyInput").val("");
      var b = c().email;
      var d = c().key;
      if (b && b !== "") {
        a("#emailValidationInput").hide();
        a("#validationWelcome").html(i18n.t("panels.validateEmail.welcome") + "<b>" + b + "</b><br/>" + i18n.t("panels.validateEmail.callToAction"));
        a("#validationWelcome").show();
      }
      if (d || d !== "") {
        a("#emailValidationKeyInput").hide();
      } else {
        a("#validationWelcome").html(i18n.t("panels.validateEmail.welcome") + b + "</b><br/>" + i18n.t("panels.validateEmail.callToActionWithKey"));
        a("#validationWelcome").show();
      }
    },
    showSuccess: function (b) {
      if (b === null) {
        a("#validatePanel .successMessage").hide();
        return;
      }
      a("#validatePanel .successMessage").html(b);
      a("#validatePanel .successMessage").show();
    },
    showError: function (b) {
      if (b === undefined || b === null) {
        a("#validatePanel .errorMessage").hide();
        return;
      }
      a("#validatePanel .errorMessage").html(b);
      a("#validatePanel .errorMessage").show();
    }
  };
  var l = {
    name: "resetpassword",
    selector: this.name + "Panel",
    view: a("#changepasswordPanel"),
    viewelements: {
      form: a("#changepasswordPanel .form"),
      keyInput: a("#changePasswordKeyInput"),
      emailInput: a("#changePasswordEmailInput"),
      oldPassInput: a("#changePasswordOldPassInput"),
      newPassInput: a("#changePasswordNewPassInput"),
      newPassConfirmInput: a("#changePasswordNewPassConfirmInput"),
      confirmButton: a("#changePasswordConfirmButton"),
      errorMessage: a("#changepasswordPanel .errorMessage"),
      successMessage: a("#changepasswordPanel .successMessage")
    },
    model: {
      key: "",
      email: "",
      oldPass: "",
      newPass: "",
      populate: function () {
        var b = true;
        var c = "<b>" + i18n.t("panels.errors.invalidInput") + "</b>";
        if (this.viewelements.keyInput.val() !== "") {
          this.model.key = this.viewelements.keyInput.val();
        } else {
          b = false;
          c = c + "<br/>" + i18n.t("panels.errors.emptyKey");
          this.viewelements.keyInput.addClass("invalid");
        }
        if (this.viewelements.emailInput.val() !== "") {
          this.model.email = this.viewelements.emailInput.val();
        } else {
          b = false;
          c = c + "<br/>" + i18n.t("panels.errors.invalidEmail");
          this.viewelements.emailInput.addClass("invalid");
        }
        if (this.viewelements.newPassInput.val() !== "") {
          this.model.newPass = this.viewelements.newPassInput.val();
        } else {
          b = false;
          c = c + "<br/>" + i18n.t("panels.errors.invalidPassword");
          this.viewelements.newPassInput.addClass("invalid");
        }
        return a.extend(this.model, {
          validated: b,
          errorMessageHTML: c
        });
      }
    },
    actions: {
      submit: function (a) {
        a.preventDefault();
        var c = this.model.populate.call(this);
        if (c.validated) {
          var d = e.changePassword(c.email, c.newPass, c.key);
          d.done(function () {
            e.connect({
              email: c.email,
              pass: c.newPass
            }).done(function () {
              console.log("Login with new pw successful!");
              window.location = "index.html#dashboard";
            });
          });
          d.fail(function (a) {
            var c = JSON.parse(a.responseText);
            var d = "<b>" + i18n.t("panels.errors.wrongCredentialsHeader") + "</b></br>";
            b(c, l.actions.showError, function (a) {
              if (a.type == "AUTH_FAILED") {
                d = d + i18n.t("panels.errors.possibleReason") + "<br/>" + i18n.t("panels.errors.invalidInput") + "<br/>" + i18n.t("panels.errors.invalidKey");
                l.actions.showError(d);
                return;
              } else if (a.type == "ERROR_EMAIL_NOT_CONFIRMED") {
                d = d + i18n.t("panels.errors.emailNotConfirmedHeader") + ". <a href='login.html#register'>" + i18n.t("panels.general.requestNewInviteButton") + "</a>";
                l.actions.showError(d);
                return;
              } else {
                return undefined;
              }
            });
          });
        } else {
          this.actions.showError.call(this, c.errorMessageHTML);
        }
      },
      showError: function (a) {
        if (!a || a === null) {
          l.viewelements.errorMessage.hide();
          return;
        }
        l.viewelements.errorMessage.html(a);
        l.viewelements.errorMessage.show();
      },
      showSuccess: function (a) {
        if (!a || a === null) {
          l.viewelements.successMessage.hide();
          return;
        }
        l.viewelements.successMessage.html(a);
        l.viewelements.successMessage.show();
      }
    },
    init: function () {
      this.viewelements.form.on("submit", this.actions.submit.bind(this));
      var b = c();
      var d = b.key;
      var e = b.email;
      if (d) {
        this.viewelements.keyInput.val(b.key);
      }
      if (e) {
        this.viewelements.emailInput.val(b.email);
      }
      if (e || e === "") {
        a("#changePasswordEmailInput").hide();
        a("#changePasswordWelcome").html(i18n.t("panels.changePassword.welcome") + " <b>" + e + "</b><br/>" + i18n.t("panels.changePassword.callToActionWithKey"));
        a("#changePasswordWelcome").show();
      }
      if (d || d === "") {
        a("#changePasswordKeyInput").hide();
      } else {
        a("#changePasswordWelcome").html(i18n.t("panels.changePassword.welcome") + " <b>" + e + "</b><br/>" + i18n.t("panels.changePassword.callToAction"));
        a("#changePasswordWelcome").show();
      }
    },
    clear: function () {
      this.viewelements.keyInput.val("");
      this.viewelements.emailInput.val("");
      this.viewelements.newPassInput.val("");
      this.viewelements.newPassConfirmInput.val("");
      this.actions.showSuccess(null);
      this.actions.showError(null);
      a(".invalid").removeClass("invalid");
    }
  };
  var m = {
    name: "forgotPassword",
    view: a("#forgotPasswordPanel"),
    checkIfHotmail: function () {
      if (/.*@(outlook|hotmail|live|msn|microsoft)\..*/g.test(a("#forgotPasswordEmailInput").val())) {
        var b = "<b>" + i18n.t("panels.errors.hotmailErrorHeader") + "</b><br/>" + i18n.t("panels.errors.hotmailErrorForgotPasswordBody") + "<br/>";
        a("#forgotPasswordEmailInput").addClass("invalid");
        m.showError(b, true);
        a("#forgotPasswordSubmitButton").prop("disabled", true);
        a("#forgotPasswordSubmitButton").prop("class", "xbuttonDisabled");
      } else {
        m.showError(null);
        a("#forgotPasswordEmailInput").removeClass("invalid");
        a("#forgotPasswordSubmitButton").prop("disabled", false);
        a("#forgotPasswordSubmitButton").prop("class", "xbutton");
      }
    },
    init: function () {
      this.api = e;
      this.captcha ||= new jd.Captcha("#forgotPasswordPanel", this.api);
      this.captcha.reload();
      this.view.find(".successMessage").show().html(i18n.t("panels.forgotPassword.notice"));
      this.view.find(" .emailInput").val(c().email);
      m.checkIfHotmail();
      a("#forgotPasswordEmailInput").keyup(function () {
        m.checkIfHotmail();
      });
      var d = this;
      l.actions.showSuccess;
      function f(c) {
        c.preventDefault();
        a(".invalid").removeClass("invalid");
        var e = d.view.find(" .emailInput").val().trim();
        var f = d.captcha.getResponse();
        var g = "<b>" + i18n.t("panels.errors.invalidInput") + "</b></br>";
        var h = true;
        if (e === "") {
          g = g + i18n.t("panels.errors.invalidEmail") + "<br/>";
          d.view.find(" .emailInput").addClass("invalid");
          h = false;
        }
        if (f === "") {
          g = g + i18n.t("panels.errors.emptyCaptcha") + "<br/>";
          d.view.find(" .captchaResponseInput").addClass("invalid");
          h = false;
        }
        if (!h) {
          d.showError(g);
          return;
        }
        var i = d.api.requestPasswordChangeEmail(e, d.captcha.getChallenge(), d.captcha.getResponse());
        i.done(function () {
          window.location.hash = "sentPwRequest";
        });
        i.fail(function (a) {
          d.captcha.reload();
          console.log(a);
          var c = JSON.parse(a.responseText);
          b(c, d.showError, function () {
            if (c.type == "CHALLENGE_FAILED") {
              d.showError("<b>" + i18n.t("panels.errors.captchaError") + "</b><br />" + i18n.t("panels.errors.wrongCaptcha"));
              return;
            } else if (c.type == "EMAIL_INVALID") {
              d.showError("<b>" + i18n.t("panels.errors.emailUnknownHeader") + "</b><br />" + i18n.t("panels.errors.emailUnknown") + "<a href='login.html#register?email=" + e + "'>" + i18n.t("panels.general.requestNewInviteButton") + "</a>");
              return;
            } else if (c.type == "ERROR_EMAIL_NOT_CONFIRMED") {
              d.showError("<b>" + i18n.t("panels.errors.emailNotConfirmedHeader") + "</b><br />" + i18n.t("panels.errors.emailNotConfirmed"));
              return;
            } else {
              return undefined;
            }
          });
        });
      }
      this.view.find(" .form").on("submit", f);
    },
    clear: function () {
      if (this.captcha) {
        this.captcha.reload();
      }
      this.showError(null);
      this.showSuccess(null);
      this.view.find(" .emailInput").val("");
      a(".invalid").removeClass("invalid");
    },
    showError: function (a) {
      if (a === undefined || a === null) {
        this.view.find(" .errorMessage").hide();
        return;
      }
      this.view.find(" .errorMessage").show().html(a);
    },
    showSuccess: function (a) {
      if (a === undefined || a === null) {
        this.view.find(" .successMessage").hide();
        return;
      }
    },
    captcha: null
  };
  var n = {
    name: "cancel",
    view: a("#cancelPanel"),
    init: function () {
      var b = c().email.trim();
      var d = c().key;
      a("#cancelFormText").html("<b>" + i18n.t("panels.cancelInvite.welcome") + " " + b + "</b></br>" + i18n.t("panels.cancelInvite.callToAction"));
      var e = this;
      a("#cancelForm").submit(function (c) {
        c.preventDefault();
        e.clear();
        jd.AppController.showLoadingGif();
        var f = true;
        var g = "<b>" + i18n.t("panels.errors.invalidInput") + "</b><br/>";
        if (b === "" || !/.@./.test(b)) {
          g = g + i18n.t("panels.errors.invalidEmail") + "<br/>";
          a("#emailCancelInput").addClass("invalid");
          f = false;
        }
        if (d === "") {
          g = g + i18n.t("panels.errors.emptyKey") + "<br/>";
          a("#emailCancelKeyInput").addClass("invalid");
          f = false;
        }
        if (!f) {
          e.showError(g);
          return;
        }
        var h = a.ajax({
          type: "POST",
          url: "http://" + window.location.hostname + ":3128/my/cancelregistrationemail",
          data: {
            email: b,
            key: d
          }
        });
        h.done(function (b) {
          e.showSuccess("<b>" + i18n.t("panels.cancelInvite.successMessageHeader") + "</b><br/>" + i18n.t("panels.cancelInvite.successMessage") + " <a href=\"login.html#register\">" + i18n.t("panels.general.requestNewInviteButton") + "</a>");
          a("#cancelInviteButton").hide();
        });
        h.fail(function (a) {
          var b = JSON.parse(a.responseText);
          if (b.type === "EMAIL_INVALID") {
            e.showError("<b>" + i18n.t("panels.errors.invalidEmail") + "</b><br/>" + i18n.t("panels.cancelInvite.invalidEmailMessage"));
          } else if (b.type === "FAILED") {
            e.showError("<b>" + i18n.t("panels.cancelInvite.cancelRequestInvalidHeader") + "</b><br/>" + i18n.t("panels.cancelInvite.cancelRequestInvalid") + "<br/> <a href='login.html#register'>" + i18n.t("panels.general.requestNewInviteButton") + "</a>");
          } else {
            e.showError(b.type);
          }
        });
        return false;
      });
    },
    showError: function (a) {
      if (a === undefined || a === null) {
        this.view.find(" .errorMessage").hide();
        return;
      }
      this.view.find(" .errorMessage").show().html(a);
    },
    showSuccess: function (a) {
      if (a === undefined || a === null) {
        this.view.find(" .successMessage").hide();
        return;
      }
      this.view.find(" .successMessage").show().html(a);
    },
    clear: function () {
      this.showError(null);
      this.showSuccess(null);
      a(".invalid").removeClass("invalid");
    }
  };
  var o = {
    name: "delete",
    view: a("#requestTerminationPanel"),
    init: function () {
      this.captcha ||= new jd.Captcha("#requestTerminationPanel", e);
      this.captcha.reload();
      this.view.find(".successMessage").show().html("Enter password and captcha to finish account deletion");
      this.view.find(" .emailInput").val(c().email);
      if (c().forced) {
        this.view.find(".successMessage").show().html(i18n.t("panels.finishTermination.welcomeMessage"));
      }
      var d = this;
      l.actions.showSuccess;
      function f(f) {
        f.preventDefault();
        a(".invalid").removeClass("invalid");
        var g = d.view.find(" .emailInput").val().trim();
        var h = d.view.find(" .passwordInput").val();
        var i = d.captcha.getResponse();
        var j = "<b>" + i18n.t("panels.errors.invalidEmail") + "</b></br>";
        var k = true;
        if (g === "") {
          j = j + i18n.t("panels.errors.emptyEmail") + "<br/>";
          d.view.find(" .emailInput").addClass("invalid");
          k = false;
        }
        if (i === "") {
          j = j + i18n.t("panels.errors.emptyCaptcha") + "<br/>";
          d.view.find(" .captchaResponseInput").addClass("invalid");
          k = false;
        }
        if (!k) {
          d.showError(j);
          return;
        }
        var l = c().key;
        var m = e.finishTermination(g, h, l, d.captcha.getChallenge(), d.captcha.getResponse());
        m.done(function () {
          localStorage.removeItem("jdapi/src/core/core.js");
          window.location.search = "";
        });
        m.fail(function (a) {
          d.captcha.reload();
          console.log(a);
          var c = "<b>" + i18n.t("panels.errors.invalidInput") + "</b><br />";
          var e = JSON.parse(a.responseText);
          b(e, d.showError, function () {
            if (e.type === "CHALLENGE_FAILED") {
              d.showError(c + i18n.t("panels.errors.wrongCaptcha"));
              return;
            } else if (e.type === "EMAIL_INVALID") {
              d.showError("<b>" + i18n.t("panels.errors.invalidEmail") + "</b><br />" + i18n.t("panels.errors.emailUnknown") + " <a href='login.html#register?email=" + g + "'>" + i18n.t("panels.general.requestNewInviteButton") + "</a>");
              return;
            } else if (e.type === "ERROR_EMAIL_NOT_CONFIRMED") {
              d.showError(c + i18n.t("panels.errors.emailNotConfirmedHeader"));
              return;
            } else if (e.type === "AUTH_FAILED") {
              d.showError(c + "Check your password.");
              return;
            } else if (e.type === "FAILED") {
              d.showError(c + "Deletion failed, check your inputs.");
              return;
            } else {
              return undefined;
            }
          });
        });
      }
      this.view.find(" .form").on("submit", f);
    },
    clear: function () {
      if (this.captcha) {
        this.captcha.reload();
      }
      this.showError(null);
      this.showSuccess(null);
      this.view.find(" .emailInput").val("");
      a(".invalid").removeClass("invalid");
    },
    showError: function (a) {
      if (a === undefined || a === null) {
        this.view.find(".errorMessage").hide();
        return;
      }
      this.view.find(".errorMessage").show().html(a);
    },
    showSuccess: function (a) {
      if (a === undefined || a === null) {
        this.view.find(" .successMessage").hide();
        return;
      }
    },
    captcha: null
  };
  var p = {
    name: "sentInvite",
    view: a("#registerSuccess"),
    init: function () {}
  };
  var q = {
    name: "sentInviteHotmail",
    view: a("#registerSuccessHotmail"),
    init: function () {}
  };
  var r = {
    name: "sentPwRequest",
    view: a("#changePwRequestSuccess"),
    init: function () {}
  };
  var s = {
    name: "signedIn",
    view: a("#alreadySignedInPanel"),
    init: function () {
      console.log(e.getCurrentUser());
      a("#logoutNotice").html(i18n.t("panels.alreadySignedIn.welcomeMessage", {
        username: e.getCurrentUser().name
      }) + "<br/><a href='login.html#logout'>Logout</a>");
    }
  };
  a("#oldBrowserPanel");
  var t = {
    startUp: function (b, d) {
      var g = c().locale;
      var t = {
        fallbackLng: "en",
        debug: true
      };
      if (g) {
        console.log(g);
        t.lng = g;
      }
      i18n.init(t, function (g) {
        a("body").i18n();
        e = b;
        var t = jd.AppController(e);
        t.registerPanel(k);
        t.registerPanel(h);
        t.registerPanel(i);
        t.registerPanel(l);
        t.registerPanel(m);
        t.registerPanel(s);
        t.registerPanel(n);
        t.registerPanel(r);
        t.registerPanel(p);
        t.registerPanel(q);
        t.registerPanel(j);
        t.registerPanel(o);
        t.setDefaultHistoryToken("#login");
        console.log("#Panels registered");
        t.printRegisteredPanels();
        a(window).on("hashchange", function () {
          var a;
          var b = c();
          a = b.action ? b.action : /^[^\\?]+(?=\\?)/.exec(window.location.hash);
          console.log("History Token changed: " + a);
          t.onHistoryTokenChange(a);
        });
        if (f.Version() < 10) {
          window.location.hash = "oldBrowser";
        }
        if (d && a.isFunction(d)) {
          d();
        }
      });
    },
    clear: function () {
      this.registerPanel.clear();
      this.loginPanel.clear();
    }
  };
  scrollToTop = function (b) {
    return d(b, a("#mainnav"));
  };
  scrollToFeatures = function (b) {
    return d(b, a("#features"));
  };
  window.jd = window.jd || {};
  window.jd.MyJDLandingPage = t;
  window.jd.JDGearMenu = g;
})(jQuery);
(function (a) {
  "use strict";

  function b(b) {
    this.api = b;
    if (!c) {
      var c = [];
    }
    var d = "#login";
    var e = "#signedIn";
    function f(h) {
      h = h || "";
      h = h.toString();
      if (h == "#logout" || h == "#maintenance") {
        b.disconnect().always(function () {
          if (window.jd.JDGearMenu) {
            window.jd.JDGearMenu.update(b.getCurrentUser());
          }
          f("#login");
        });
      }
      if (h.indexOf("delete") === -1 && h.indexOf("forgotPassword") === -1 && h.indexOf("resetpassword") === -1 && h.indexOf("sentPwRequest") === -1 && b.getAPIState() !== 3) {
        console.log("Switch to signedIn panel");
        console.log(b.getAPIState());
        h = e;
      }
      c.push(["_trackPageview", "login.html" + h]);
      for (var i = 0; i < g.length; i++) {
        if (g[i].name == h || "#" + g[i].name == h) {
          a(".visible").removeClass("visible");
          if (g[i].clear) {
            g[i].clear();
          }
          g[i].init();
          g[i].view.addClass("visible");
          return;
        }
      }
      console.warn("HISTORY TOKEN INVALID " + h);
      if (h === d) {
        throw "Missing defaultHistoryToken Panel";
      }
      if (h === e) {
        throw "Missing signedInHistoryToken Panel";
      }
      if ((d !== null || d !== undefined) && h != d) {
        f(d);
      }
    }
    var g = [];
    return {
      setDefaultHistoryToken: function (a) {
        a = a;
      },
      registerPanel: function (a) {
        if (a !== undefined && a !== null) {
          g[g.length] = a;
        }
      },
      printRegisteredPanels: function () {
        for (var a = 0; a < g.length; a++) {
          console.log(g[a].name);
        }
      },
      onHistoryTokenChange: function (a) {
        f(a);
      },
      showLoadingGif: function () {
        a("#loadingGif").show();
      },
      hideLoadingGif: function () {
        a("#loadingGif").hide();
      }
    };
  }
  function c(b, c) {
    this.contextId = b;
    this.jdapi = c;
    a(b + " .captchaReloadButton").click(this.reload.bind(this));
  }
  a.extend(c.prototype, {
    reload: function () {
      var b = this.jdapi.getCaptcha();
      b.done(function (b) {
        a(this.contextId + " .captchaImage").attr("src", b.image);
        this.challenge = b.captchaChallenge;
        a(this.contextId + " .captchaResponseInput").val("");
      }.bind(this));
      b.fail(function (a) {
        console.warn(JSON.parse(a.responseText));
      });
      return b;
    },
    getChallenge: function () {
      return this.challenge;
    },
    getResponse: function () {
      return a(this.contextId + " .captchaResponseInput").val();
    }
  });
  function d() {}
  a.extend(d.prototype, {
    newItem: function (a, b) {
      b = b || {};
      var c = "";
      c = window.location.toString().split("#")[0];
      c = c + "#" + a;
      window.location = "#" + a;
    },
    setParam: function (a, b) {
      var c = window.location.toString();
      var d = null;
      if (c.indexOf("#") !== -1) {
        var e = c.split("#");
        if (e[1]) {
          d = e[1];
        }
      }
      var f = "?" + a + "=" + b;
      if (d) {
        f = f + "#" + d;
      }
      window.location = f;
    },
    getParam: function (a) {
      var b = window.location.search;
      if (b === "") {
        return "";
      }
      b = b.substring(1, b.length);
      var c = b.split("&");
      var d = "";
      c.forEach(function (b) {
        var c = b.split("=");
        if (a === c[0]) {
          d = c[1];
          return false;
        }
      });
      return d;
    }
  });
  window.jd = window.jd || {};
  window.jd.AppController = b;
  window.jd.Historian = new d();
  window.jd.Captcha = c;
})(jQuery); //# sourceMappingURL=sourcemap.map
